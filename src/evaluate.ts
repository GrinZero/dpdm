/*!
 * Copyright 2020 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2020-06-30 11:00:14
 */

import ts from 'typescript';

class Scope {
  usedImports: string[] = [];
  parent: Scope | undefined;
  variables: Record<string, ts.Node> = Object.create(null);

  constructor(parent: Scope | undefined) {
    this.parent = parent;
  }
}

export function evaluate(node: ts.Node): string[] {
  const root = new Scope(void 0);
  visit(node, root);
  return root.usedImports;
}

const visit = (node: ts.Node, scope: Scope) => {
  visitors[node.kind](node, scope);
};

const visitors: Record<ts.SyntaxKind, (node: ts.Node, scope: Scope) => void> = {
  [ts.SyntaxKind.Unknown]: (node, scope) => {},
  [ts.SyntaxKind.EndOfFileToken]: (node, scope) => {},
  [ts.SyntaxKind.SingleLineCommentTrivia]: (node, scope) => {},
  [ts.SyntaxKind.MultiLineCommentTrivia]: (node, scope) => {},
  [ts.SyntaxKind.NewLineTrivia]: (node, scope) => {},
  [ts.SyntaxKind.WhitespaceTrivia]: (node, scope) => {},
  [ts.SyntaxKind.ShebangTrivia]: (node, scope) => {},
  [ts.SyntaxKind.ConflictMarkerTrivia]: (node, scope) => {},
  [ts.SyntaxKind.NumericLiteral]: (node, scope) => {},
  [ts.SyntaxKind.BigIntLiteral]: (node, scope) => {},
  [ts.SyntaxKind.StringLiteral]: (node, scope) => {},
  [ts.SyntaxKind.JsxText]: (node, scope) => {},
  [ts.SyntaxKind.JsxTextAllWhiteSpaces]: (node, scope) => {},
  [ts.SyntaxKind.RegularExpressionLiteral]: (node, scope) => {},
  [ts.SyntaxKind.NoSubstitutionTemplateLiteral]: (node, scope) => {},
  [ts.SyntaxKind.TemplateHead]: (node, scope) => {},
  [ts.SyntaxKind.TemplateMiddle]: (node, scope) => {},
  [ts.SyntaxKind.TemplateTail]: (node, scope) => {},
  [ts.SyntaxKind.OpenBraceToken]: (node, scope) => {},
  [ts.SyntaxKind.CloseBraceToken]: (node, scope) => {},
  [ts.SyntaxKind.OpenParenToken]: (node, scope) => {},
  [ts.SyntaxKind.CloseParenToken]: (node, scope) => {},
  [ts.SyntaxKind.OpenBracketToken]: (node, scope) => {},
  [ts.SyntaxKind.CloseBracketToken]: (node, scope) => {},
  [ts.SyntaxKind.DotToken]: (node, scope) => {},
  [ts.SyntaxKind.DotDotDotToken]: (node, scope) => {},
  [ts.SyntaxKind.SemicolonToken]: (node, scope) => {},
  [ts.SyntaxKind.CommaToken]: (node, scope) => {},
  [ts.SyntaxKind.QuestionDotToken]: (node, scope) => {},
  [ts.SyntaxKind.LessThanToken]: (node, scope) => {},
  [ts.SyntaxKind.LessThanSlashToken]: (node, scope) => {},
  [ts.SyntaxKind.GreaterThanToken]: (node, scope) => {},
  [ts.SyntaxKind.LessThanEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.GreaterThanEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.EqualsEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.ExclamationEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.EqualsEqualsEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.ExclamationEqualsEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.EqualsGreaterThanToken]: (node, scope) => {},
  [ts.SyntaxKind.PlusToken]: (node, scope) => {},
  [ts.SyntaxKind.MinusToken]: (node, scope) => {},
  [ts.SyntaxKind.AsteriskToken]: (node, scope) => {},
  [ts.SyntaxKind.AsteriskAsteriskToken]: (node, scope) => {},
  [ts.SyntaxKind.SlashToken]: (node, scope) => {},
  [ts.SyntaxKind.PercentToken]: (node, scope) => {},
  [ts.SyntaxKind.PlusPlusToken]: (node, scope) => {},
  [ts.SyntaxKind.MinusMinusToken]: (node, scope) => {},
  [ts.SyntaxKind.LessThanLessThanToken]: (node, scope) => {},
  [ts.SyntaxKind.GreaterThanGreaterThanToken]: (node, scope) => {},
  [ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken]: (node, scope) => {},
  [ts.SyntaxKind.AmpersandToken]: (node, scope) => {},
  [ts.SyntaxKind.BarToken]: (node, scope) => {},
  [ts.SyntaxKind.CaretToken]: (node, scope) => {},
  [ts.SyntaxKind.ExclamationToken]: (node, scope) => {},
  [ts.SyntaxKind.TildeToken]: (node, scope) => {},
  [ts.SyntaxKind.AmpersandAmpersandToken]: (node, scope) => {},
  [ts.SyntaxKind.BarBarToken]: (node, scope) => {},
  [ts.SyntaxKind.QuestionToken]: (node, scope) => {},
  [ts.SyntaxKind.ColonToken]: (node, scope) => {},
  [ts.SyntaxKind.AtToken]: (node, scope) => {},
  [ts.SyntaxKind.QuestionQuestionToken]: (node, scope) => {},
  [ts.SyntaxKind.BacktickToken]: (node, scope) => {},
  [ts.SyntaxKind.EqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.PlusEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.MinusEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.AsteriskEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.AsteriskAsteriskEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.SlashEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.PercentEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.LessThanLessThanEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.GreaterThanGreaterThanEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken]: (
    node,
    scope,
  ) => {},
  [ts.SyntaxKind.AmpersandEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.BarEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.CaretEqualsToken]: (node, scope) => {},
  [ts.SyntaxKind.Identifier]: (node, scope) => {},
  [ts.SyntaxKind.PrivateIdentifier]: (node, scope) => {},
  [ts.SyntaxKind.BreakKeyword]: (node, scope) => {},
  [ts.SyntaxKind.CaseKeyword]: (node, scope) => {},
  [ts.SyntaxKind.CatchKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ClassKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ConstKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ContinueKeyword]: (node, scope) => {},
  [ts.SyntaxKind.DebuggerKeyword]: (node, scope) => {},
  [ts.SyntaxKind.DefaultKeyword]: (node, scope) => {},
  [ts.SyntaxKind.DeleteKeyword]: (node, scope) => {},
  [ts.SyntaxKind.DoKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ElseKeyword]: (node, scope) => {},
  [ts.SyntaxKind.EnumKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ExportKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ExtendsKeyword]: (node, scope) => {},
  [ts.SyntaxKind.FalseKeyword]: (node, scope) => {},
  [ts.SyntaxKind.FinallyKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ForKeyword]: (node, scope) => {},
  [ts.SyntaxKind.FunctionKeyword]: (node, scope) => {},
  [ts.SyntaxKind.IfKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ImportKeyword]: (node, scope) => {},
  [ts.SyntaxKind.InKeyword]: (node, scope) => {},
  [ts.SyntaxKind.InstanceOfKeyword]: (node, scope) => {},
  [ts.SyntaxKind.NewKeyword]: (node, scope) => {},
  [ts.SyntaxKind.NullKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ReturnKeyword]: (node, scope) => {},
  [ts.SyntaxKind.SuperKeyword]: (node, scope) => {},
  [ts.SyntaxKind.SwitchKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ThisKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ThrowKeyword]: (node, scope) => {},
  [ts.SyntaxKind.TrueKeyword]: (node, scope) => {},
  [ts.SyntaxKind.TryKeyword]: (node, scope) => {},
  [ts.SyntaxKind.TypeOfKeyword]: (node, scope) => {},
  [ts.SyntaxKind.VarKeyword]: (node, scope) => {},
  [ts.SyntaxKind.VoidKeyword]: (node, scope) => {},
  [ts.SyntaxKind.WhileKeyword]: (node, scope) => {},
  [ts.SyntaxKind.WithKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ImplementsKeyword]: (node, scope) => {},
  [ts.SyntaxKind.InterfaceKeyword]: (node, scope) => {},
  [ts.SyntaxKind.LetKeyword]: (node, scope) => {},
  [ts.SyntaxKind.PackageKeyword]: (node, scope) => {},
  [ts.SyntaxKind.PrivateKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ProtectedKeyword]: (node, scope) => {},
  [ts.SyntaxKind.PublicKeyword]: (node, scope) => {},
  [ts.SyntaxKind.StaticKeyword]: (node, scope) => {},
  [ts.SyntaxKind.YieldKeyword]: (node, scope) => {},
  [ts.SyntaxKind.AbstractKeyword]: (node, scope) => {},
  [ts.SyntaxKind.AsKeyword]: (node, scope) => {},
  [ts.SyntaxKind.AssertsKeyword]: (node, scope) => {},
  [ts.SyntaxKind.AnyKeyword]: (node, scope) => {},
  [ts.SyntaxKind.AsyncKeyword]: (node, scope) => {},
  [ts.SyntaxKind.AwaitKeyword]: (node, scope) => {},
  [ts.SyntaxKind.BooleanKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ConstructorKeyword]: (node, scope) => {},
  [ts.SyntaxKind.DeclareKeyword]: (node, scope) => {},
  [ts.SyntaxKind.GetKeyword]: (node, scope) => {},
  [ts.SyntaxKind.InferKeyword]: (node, scope) => {},
  [ts.SyntaxKind.IsKeyword]: (node, scope) => {},
  [ts.SyntaxKind.KeyOfKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ModuleKeyword]: (node, scope) => {},
  [ts.SyntaxKind.NamespaceKeyword]: (node, scope) => {},
  [ts.SyntaxKind.NeverKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ReadonlyKeyword]: (node, scope) => {},
  [ts.SyntaxKind.RequireKeyword]: (node, scope) => {},
  [ts.SyntaxKind.NumberKeyword]: (node, scope) => {},
  [ts.SyntaxKind.ObjectKeyword]: (node, scope) => {},
  [ts.SyntaxKind.SetKeyword]: (node, scope) => {},
  [ts.SyntaxKind.StringKeyword]: (node, scope) => {},
  [ts.SyntaxKind.SymbolKeyword]: (node, scope) => {},
  [ts.SyntaxKind.TypeKeyword]: (node, scope) => {},
  [ts.SyntaxKind.UndefinedKeyword]: (node, scope) => {},
  [ts.SyntaxKind.UniqueKeyword]: (node, scope) => {},
  [ts.SyntaxKind.UnknownKeyword]: (node, scope) => {},
  [ts.SyntaxKind.FromKeyword]: (node, scope) => {},
  [ts.SyntaxKind.GlobalKeyword]: (node, scope) => {},
  [ts.SyntaxKind.BigIntKeyword]: (node, scope) => {},
  [ts.SyntaxKind.OfKeyword]: (node, scope) => {},
  [ts.SyntaxKind.QualifiedName]: (node, scope) => {},
  [ts.SyntaxKind.ComputedPropertyName]: (node, scope) => {},
  [ts.SyntaxKind.TypeParameter]: (node, scope) => {},
  [ts.SyntaxKind.Parameter]: (node, scope) => {},
  [ts.SyntaxKind.Decorator]: (node, scope) => {},
  [ts.SyntaxKind.PropertySignature]: (node, scope) => {},
  [ts.SyntaxKind.PropertyDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.MethodSignature]: (node, scope) => {},
  [ts.SyntaxKind.MethodDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.Constructor]: (node, scope) => {},
  [ts.SyntaxKind.GetAccessor]: (node, scope) => {},
  [ts.SyntaxKind.SetAccessor]: (node, scope) => {},
  [ts.SyntaxKind.CallSignature]: (node, scope) => {},
  [ts.SyntaxKind.ConstructSignature]: (node, scope) => {},
  [ts.SyntaxKind.IndexSignature]: (node, scope) => {},
  [ts.SyntaxKind.TypePredicate]: (node, scope) => {},
  [ts.SyntaxKind.TypeReference]: (node, scope) => {},
  [ts.SyntaxKind.FunctionType]: (node, scope) => {},
  [ts.SyntaxKind.ConstructorType]: (node, scope) => {},
  [ts.SyntaxKind.TypeQuery]: (node, scope) => {},
  [ts.SyntaxKind.TypeLiteral]: (node, scope) => {},
  [ts.SyntaxKind.ArrayType]: (node, scope) => {},
  [ts.SyntaxKind.TupleType]: (node, scope) => {},
  [ts.SyntaxKind.OptionalType]: (node, scope) => {},
  [ts.SyntaxKind.RestType]: (node, scope) => {},
  [ts.SyntaxKind.UnionType]: (node, scope) => {},
  [ts.SyntaxKind.IntersectionType]: (node, scope) => {},
  [ts.SyntaxKind.ConditionalType]: (node, scope) => {},
  [ts.SyntaxKind.InferType]: (node, scope) => {},
  [ts.SyntaxKind.ParenthesizedType]: (node, scope) => {},
  [ts.SyntaxKind.ThisType]: (node, scope) => {},
  [ts.SyntaxKind.TypeOperator]: (node, scope) => {},
  [ts.SyntaxKind.IndexedAccessType]: (node, scope) => {},
  [ts.SyntaxKind.MappedType]: (node, scope) => {},
  [ts.SyntaxKind.LiteralType]: (node, scope) => {},
  [ts.SyntaxKind.ImportType]: (node, scope) => {},
  [ts.SyntaxKind.ObjectBindingPattern]: (node, scope) => {},
  [ts.SyntaxKind.ArrayBindingPattern]: (node, scope) => {},
  [ts.SyntaxKind.BindingElement]: (node, scope) => {},
  [ts.SyntaxKind.ArrayLiteralExpression]: (node, scope) => {},
  [ts.SyntaxKind.ObjectLiteralExpression]: (node, scope) => {},
  [ts.SyntaxKind.PropertyAccessExpression]: (node, scope) => {},
  [ts.SyntaxKind.ElementAccessExpression]: (node, scope) => {},
  [ts.SyntaxKind.CallExpression]: (node, scope) => {},
  [ts.SyntaxKind.NewExpression]: (node, scope) => {},
  [ts.SyntaxKind.TaggedTemplateExpression]: (node, scope) => {},
  [ts.SyntaxKind.TypeAssertionExpression]: (node, scope) => {},
  [ts.SyntaxKind.ParenthesizedExpression]: (node, scope) => {},
  [ts.SyntaxKind.FunctionExpression]: (node, scope) => {},
  [ts.SyntaxKind.ArrowFunction]: (node, scope) => {},
  [ts.SyntaxKind.DeleteExpression]: (node, scope) => {},
  [ts.SyntaxKind.TypeOfExpression]: (node, scope) => {},
  [ts.SyntaxKind.VoidExpression]: (node, scope) => {},
  [ts.SyntaxKind.AwaitExpression]: (node, scope) => {},
  [ts.SyntaxKind.PrefixUnaryExpression]: (node, scope) => {},
  [ts.SyntaxKind.PostfixUnaryExpression]: (node, scope) => {},
  [ts.SyntaxKind.BinaryExpression]: (node, scope) => {},
  [ts.SyntaxKind.ConditionalExpression]: (node, scope) => {},
  [ts.SyntaxKind.TemplateExpression]: (node, scope) => {},
  [ts.SyntaxKind.YieldExpression]: (node, scope) => {},
  [ts.SyntaxKind.SpreadElement]: (node, scope) => {},
  [ts.SyntaxKind.ClassExpression]: (node, scope) => {},
  [ts.SyntaxKind.OmittedExpression]: (node, scope) => {},
  [ts.SyntaxKind.ExpressionWithTypeArguments]: (node, scope) => {},
  [ts.SyntaxKind.AsExpression]: (node, scope) => {},
  [ts.SyntaxKind.NonNullExpression]: (node, scope) => {},
  [ts.SyntaxKind.MetaProperty]: (node, scope) => {},
  [ts.SyntaxKind.SyntheticExpression]: (node, scope) => {},
  [ts.SyntaxKind.TemplateSpan]: (node, scope) => {},
  [ts.SyntaxKind.SemicolonClassElement]: (node, scope) => {},
  [ts.SyntaxKind.Block]: (node, scope) => {},
  [ts.SyntaxKind.EmptyStatement]: (node, scope) => {},
  [ts.SyntaxKind.VariableStatement]: (node, scope) => {},
  [ts.SyntaxKind.ExpressionStatement]: (node, scope) => {},
  [ts.SyntaxKind.IfStatement]: (node, scope) => {},
  [ts.SyntaxKind.DoStatement]: (node, scope) => {},
  [ts.SyntaxKind.WhileStatement]: (node, scope) => {},
  [ts.SyntaxKind.ForStatement]: (node, scope) => {},
  [ts.SyntaxKind.ForInStatement]: (node, scope) => {},
  [ts.SyntaxKind.ForOfStatement]: (node, scope) => {},
  [ts.SyntaxKind.ContinueStatement]: (node, scope) => {},
  [ts.SyntaxKind.BreakStatement]: (node, scope) => {},
  [ts.SyntaxKind.ReturnStatement]: (node, scope) => {},
  [ts.SyntaxKind.WithStatement]: (node, scope) => {},
  [ts.SyntaxKind.SwitchStatement]: (node, scope) => {},
  [ts.SyntaxKind.LabeledStatement]: (node, scope) => {},
  [ts.SyntaxKind.ThrowStatement]: (node, scope) => {},
  [ts.SyntaxKind.TryStatement]: (node, scope) => {},
  [ts.SyntaxKind.DebuggerStatement]: (node, scope) => {},
  [ts.SyntaxKind.VariableDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.VariableDeclarationList]: (node, scope) => {},
  [ts.SyntaxKind.FunctionDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.ClassDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.InterfaceDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.TypeAliasDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.EnumDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.ModuleDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.ModuleBlock]: (node, scope) => {},
  [ts.SyntaxKind.CaseBlock]: (node, scope) => {},
  [ts.SyntaxKind.NamespaceExportDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.ImportEqualsDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.ImportDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.ImportClause]: (node, scope) => {},
  [ts.SyntaxKind.NamespaceImport]: (node, scope) => {},
  [ts.SyntaxKind.NamedImports]: (node, scope) => {},
  [ts.SyntaxKind.ImportSpecifier]: (node, scope) => {},
  [ts.SyntaxKind.ExportAssignment]: (node, scope) => {},
  [ts.SyntaxKind.ExportDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.NamedExports]: (node, scope) => {},
  [ts.SyntaxKind.NamespaceExport]: (node, scope) => {},
  [ts.SyntaxKind.ExportSpecifier]: (node, scope) => {},
  [ts.SyntaxKind.MissingDeclaration]: (node, scope) => {},
  [ts.SyntaxKind.ExternalModuleReference]: (node, scope) => {},
  [ts.SyntaxKind.JsxElement]: (node, scope) => {},
  [ts.SyntaxKind.JsxSelfClosingElement]: (node, scope) => {},
  [ts.SyntaxKind.JsxOpeningElement]: (node, scope) => {},
  [ts.SyntaxKind.JsxClosingElement]: (node, scope) => {},
  [ts.SyntaxKind.JsxFragment]: (node, scope) => {},
  [ts.SyntaxKind.JsxOpeningFragment]: (node, scope) => {},
  [ts.SyntaxKind.JsxClosingFragment]: (node, scope) => {},
  [ts.SyntaxKind.JsxAttribute]: (node, scope) => {},
  [ts.SyntaxKind.JsxAttributes]: (node, scope) => {},
  [ts.SyntaxKind.JsxSpreadAttribute]: (node, scope) => {},
  [ts.SyntaxKind.JsxExpression]: (node, scope) => {},
  [ts.SyntaxKind.CaseClause]: (node, scope) => {},
  [ts.SyntaxKind.DefaultClause]: (node, scope) => {},
  [ts.SyntaxKind.HeritageClause]: (node, scope) => {},
  [ts.SyntaxKind.CatchClause]: (node, scope) => {},
  [ts.SyntaxKind.PropertyAssignment]: (node, scope) => {},
  [ts.SyntaxKind.ShorthandPropertyAssignment]: (node, scope) => {},
  [ts.SyntaxKind.SpreadAssignment]: (node, scope) => {},
  [ts.SyntaxKind.EnumMember]: (node, scope) => {},
  [ts.SyntaxKind.UnparsedPrologue]: (node, scope) => {},
  [ts.SyntaxKind.UnparsedPrepend]: (node, scope) => {},
  [ts.SyntaxKind.UnparsedText]: (node, scope) => {},
  [ts.SyntaxKind.UnparsedInternalText]: (node, scope) => {},
  [ts.SyntaxKind.UnparsedSyntheticReference]: (node, scope) => {},
  [ts.SyntaxKind.SourceFile]: (node, scope) => {},
  [ts.SyntaxKind.Bundle]: (node, scope) => {},
  [ts.SyntaxKind.UnparsedSource]: (node, scope) => {},
  [ts.SyntaxKind.InputFiles]: (node, scope) => {},
  [ts.SyntaxKind.JSDocTypeExpression]: (node, scope) => {},
  [ts.SyntaxKind.JSDocAllType]: (node, scope) => {},
  [ts.SyntaxKind.JSDocUnknownType]: (node, scope) => {},
  [ts.SyntaxKind.JSDocNullableType]: (node, scope) => {},
  [ts.SyntaxKind.JSDocNonNullableType]: (node, scope) => {},
  [ts.SyntaxKind.JSDocOptionalType]: (node, scope) => {},
  [ts.SyntaxKind.JSDocFunctionType]: (node, scope) => {},
  [ts.SyntaxKind.JSDocVariadicType]: (node, scope) => {},
  [ts.SyntaxKind.JSDocNamepathType]: (node, scope) => {},
  [ts.SyntaxKind.JSDocComment]: (node, scope) => {},
  [ts.SyntaxKind.JSDocTypeLiteral]: (node, scope) => {},
  [ts.SyntaxKind.JSDocSignature]: (node, scope) => {},
  [ts.SyntaxKind.JSDocTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocAugmentsTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocAuthorTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocClassTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocPublicTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocPrivateTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocProtectedTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocReadonlyTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocCallbackTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocEnumTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocParameterTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocReturnTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocThisTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocTypeTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocTemplateTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocTypedefTag]: (node, scope) => {},
  [ts.SyntaxKind.JSDocPropertyTag]: (node, scope) => {},
  [ts.SyntaxKind.SyntaxList]: (node, scope) => {},
  [ts.SyntaxKind.NotEmittedStatement]: (node, scope) => {},
  [ts.SyntaxKind.PartiallyEmittedExpression]: (node, scope) => {},
  [ts.SyntaxKind.CommaListExpression]: (node, scope) => {},
  [ts.SyntaxKind.MergeDeclarationMarker]: (node, scope) => {},
  [ts.SyntaxKind.EndOfDeclarationMarker]: (node, scope) => {},
  [ts.SyntaxKind.SyntheticReferenceExpression]: (node, scope) => {},
  [ts.SyntaxKind.Count]: (node, scope) => {},
  [ts.SyntaxKind.FirstAssignment]: (node, scope) => {},
  [ts.SyntaxKind.LastAssignment]: (node, scope) => {},
  [ts.SyntaxKind.FirstCompoundAssignment]: (node, scope) => {},
  [ts.SyntaxKind.LastCompoundAssignment]: (node, scope) => {},
  [ts.SyntaxKind.FirstReservedWord]: (node, scope) => {},
  [ts.SyntaxKind.LastReservedWord]: (node, scope) => {},
  [ts.SyntaxKind.FirstKeyword]: (node, scope) => {},
  [ts.SyntaxKind.LastKeyword]: (node, scope) => {},
  [ts.SyntaxKind.FirstFutureReservedWord]: (node, scope) => {},
  [ts.SyntaxKind.LastFutureReservedWord]: (node, scope) => {},
  [ts.SyntaxKind.FirstTypeNode]: (node, scope) => {},
  [ts.SyntaxKind.LastTypeNode]: (node, scope) => {},
  [ts.SyntaxKind.FirstPunctuation]: (node, scope) => {},
  [ts.SyntaxKind.LastPunctuation]: (node, scope) => {},
  [ts.SyntaxKind.FirstToken]: (node, scope) => {},
  [ts.SyntaxKind.LastToken]: (node, scope) => {},
  [ts.SyntaxKind.FirstTriviaToken]: (node, scope) => {},
  [ts.SyntaxKind.LastTriviaToken]: (node, scope) => {},
  [ts.SyntaxKind.FirstLiteralToken]: (node, scope) => {},
  [ts.SyntaxKind.LastLiteralToken]: (node, scope) => {},
  [ts.SyntaxKind.FirstTemplateToken]: (node, scope) => {},
  [ts.SyntaxKind.LastTemplateToken]: (node, scope) => {},
  [ts.SyntaxKind.FirstBinaryOperator]: (node, scope) => {},
  [ts.SyntaxKind.LastBinaryOperator]: (node, scope) => {},
  [ts.SyntaxKind.FirstStatement]: (node, scope) => {},
  [ts.SyntaxKind.LastStatement]: (node, scope) => {},
  [ts.SyntaxKind.FirstNode]: (node, scope) => {},
  [ts.SyntaxKind.FirstJSDocNode]: (node, scope) => {},
  [ts.SyntaxKind.LastJSDocNode]: (node, scope) => {},
  [ts.SyntaxKind.FirstJSDocTagNode]: (node, scope) => {},
  [ts.SyntaxKind.LastJSDocTagNode]: (node, scope) => {},
};
